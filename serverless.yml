service: python-lambda-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: ""

package:
  exclude:
    - node_modules/**

plugins:
  - serverless-offline
custom:
  dynamoTableName: dynamo-test-table

functions:
  app:
    handler: src.controllers.handler.lambda_handler
    events:
      - http:
          path: /health/api
          method: get
          cors: true
      - http:
          path: /health/dynamo
          method: get
          cors: true
      - http:
          path: /health/putitem
          method: put
          cors: true
#      - http:
#          path: /{proxy+}
#          method: ANY
#          cors: true

#    handler: src.controllers.health_check.api_health_check
#    events:
#      - http:
#          path: /health/api
#          method: ANY
#          cors: true



resources:
  Resources:
    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

#    DynamoDBQueryPolicy:
#      Type: AWS::IAM::Policy
#      Properties:
#        PolicyName: DynamoDBTestTableInteractionPolicy
#        PolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Action:
#                - dynamodb:DescribeTable
#                - dynamodb:Query
#                - dynamodb:Scan
#                - dynamodb:GetItem
#                - dynamodb:PutItem
#                - dynamodb:UpdateItem
#                - dynamodb:DeleteItem
#              Resource: MyDynamoDBTable
#        Roles:
#          - Ref: IamRoleLambdaExecution
